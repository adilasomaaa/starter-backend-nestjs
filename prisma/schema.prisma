// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  active
  inactive
  banned
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  username   String    @unique
  password   String?
  verifiedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  profile           Profile?
  userRole          UserRole[]
  activeTokens      ActiveToken[]
  verificationCodes VerificationCode?
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique // Setiap user hanya punya satu kode aktif
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  code      String   @unique
  sendCount Int      @default(1)
  expiresAt DateTime
  updatedAt DateTime @updatedAt
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userRoles       UserRole[]
  rolePermissions RolePermission[]
}

model Permission {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles RolePermission[]
}

model UserRole {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@unique([userId, roleId])
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId Int

  @@unique([roleId, permissionId])
}

model ActiveToken {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  token  String
}

model Profile {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int     @unique
  name     String
  username String
  bio      String?
  photo    String  @default("default.png")
  status   Status  @default(active)
}
